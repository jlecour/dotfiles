alias pomodoro='ruby /usr/local/share/scripts/pomodoro.rb/pomodoro.rb'

alias dotfiles='mate ~/.dotfiles/'

# servers

alias elasticsearch_start='launchctl load -wF ~/Library/LaunchAgents/homebrew.mxcl.elasticsearch.plist'
alias elasticsearch_stop='launchctl unload -wF ~/Library/LaunchAgents/homebrew.mxcl.elasticsearch.plist'

alias pow_start='launchctl load -w ~/Library/LaunchAgents/cx.pow.powd.plist'
alias pow_stop='launchctl unload -w ~/Library/LaunchAgents/cx.pow.powd.plist'

alias redis_start='launchctl load -w ~/Library/LaunchAgents/hh{1,2,3,4,5}.autrement.redis.plist'
alias redis_stop='launchctl unload -w ~/Library/LaunchAgents/hh{1,2,3,4,5}.autrement.redis.plist'

alias mongodb_start='launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist'
alias mongodb_stop='launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist'

# alias mysql_start='launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist'
# alias mysql_stop='launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist'
alias mysql_start='launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.percona-server.plist'
alias mysql_stop='launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.percona-server.plist'

alias memcached_start='launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.memcached.plist'
alias memcached_stop='launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.memcached.plist'

alias servers_start='pow_start; redis_start; mongodb_start; mysql_start; memcached_start'
alias servers_stop='pow_stop; redis_stop; mongodb_stop; mysql_stop; memcached_stop'

alias solr_start='(cd ~/Sites/jetty && java -jar start.jar)'

# Command Enhancements

alias sad='afplay ~/bin/dotfiles/sad_trombone.mp3 > /dev/null 2>&1 &'

# Open man pages in Preview
function pman() {
  man -t "${1}" | open -f -a /Applications/Preview.app
}

# Utility
alias reload='source ~/bin/dotfiles/bash/aliases'
# alias ea='mate -w ~/bin/dotfiles/bash/aliases && reload' # Edit aliases
# alias ee="mate ~/bin/dotfiles/bash/env"

function tmproj(){
  if [ -f '*.tmproj' ]
  then
    command open ./*.tmproj
  else
    command mate .
  fi
}

# Quicker cd
# alias cg='cd /Library/Ruby/Gems/1.8/gems/'
# function cs() {
#  cd ~/Sites/$*
# }

# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
# alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() { 
    cd $1; ls 
}
alias cls='clear; ls'
alias h='history'
alias l.='ls -d .[^.]*'
# alias l='ls -lhGt'  # -l long listing, most recent first
#                     # -G color


alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
# alias ll='tree -L 1 -C -h'
alias lt='ls -lt' # sort with recently modified first
# alias md='mkdir -p'
# alias s='cd ..'   # up one dir

function take() { 
    mkdir -p "$1"
    cd "$1" 
}

# alias e='exit'
# alias k9="killall -9"
# function killnamed () { 
#     ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill 
# }
# function zipr() {
#   zip -r $1.zip $1
# }

# Finder
alias o='open .'

# General code

alias myip='curl -B http://whatismyip.org/'

# From Chris Wanstrath
# function pless() { 
#     pygmentize $1 | less -r 
# }

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory


# Git
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias ga='git add'
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -v -a'
# alias gcp="git commit -v --author='JLecour & MrMoins <dev+jlecour+mrmoins@autrementlemail.com>'"
# alias gcap="git commit -v -a --author='JLecour & MrMoins <dev+jlecour+mrmoins@autrementlemail.com>'"
# # Commit pending changes and quote all args as message
# function gg() { 
#     git commit -v -a -m "$*"
# }

alias gco='git checkout'
function gd() { command git diff --patience "$@" | mdr; }
# alias gd='git diff -u'
alias gdw='git diff --word-diff'
alias gl='git pull'
alias gnp="git-notpushed"
alias gp='git push'
alias gst='git status'
alias g='git status -sb'
alias gk='gitk --all &'
alias gx='gitx'
alias eg='mate .git/config'

# # Git clone from GitHub
# function gch() {
#   git clone git://github.com/$USER/$1.git
# }

# # Setup a tracking branch from [remote] [branch_name]
# function gbt() { 
#   git branch --track $2 $1/$2 && git checkout $2 
# }
# Quickly clobber a file and checkout
function grf() { 
  rm $1
  git checkout $1 
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@wishbed.autrementprive.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@wishbed.autrementprive.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}
function gom() {
  for file in $(git status | sed -n '/.*modified: */s///p'); do
    mate $file
  done
}

# # Ruby
# alias r="rake"
# 
# function markdown() { 
#   /Applications/TextMate.app/Contents/SharedSupport/Support/bin/Markdown.pl $1 > $1.html 
# }

# Rails
alias rp='touch tmp/restart.txt'
function rc(){
  if [ -f './Gemfile' ]
  then
    if [ -x './script/console' ]
    then
      command bundle exec ./script/console $*
    else
      command bundle exec rails console $*
    fi
  elif [ -x './script/console' ]
  then
    command ./script/console $*
  else
    echo "No Rails console found"
  fi
}
function rg(){
  if [ -f './Gemfile' ]
  then
    if [ -x './script/generate' ]
    then
      command bundle exec ./script/generate $*
    else
      command bundle exec rails generate $*
    fi
  elif [ -x './script/generate' ]
  then
    command ./script/generate $*
  else
    echo "No Rails console found"
  fi
}
alias ss='passenger start'
alias tl='tail -f log/*.log'
function to_staging(){
  if [ -x './script/to_staging' ]
  then
    command ./script/to_staging
  else
    echo "Script 'to_staging' not found"
  fi
}
function to_master(){
  if [ -x './script/to_master' ]
  then
    command ./script/to_master
  else
    echo "Script 'to_master' not found"
  fi
}
function to_production(){
  if [ -x './script/to_production' ]
  then
    command ./script/to_production
  else
    echo "Script 'to_production' not found"
  fi
}
function to_dev(){
  if [ -x './script/to_dev' ]
  then
    command ./script/to_dev
  else
    echo "Script 'to_dev' not found"
  fi
}

alias resque_work="RAILS_ENV=development QUEUE=\* VERBOSE=1 rake environment resque:work"


# # TDD / BDD
# 
# alias aa='autotest'
# alias aaf='autotest -f' # Don't run all at start
# alias aas="./script/autospec"
# 
# # From http://github.com/suztomo/dotfiles
# function rmf(){
#     for file in $*
#     do
#         __rm_single_file $file
#     done
# }
# 
# function __rm_single_file(){
#     if ! [ -d ~/.Trash/ ]
#     then
#         command /bin/mkdir ~/.Trash
#     fi
# 
#     if ! [ $# -eq 1 ]
#     then
#         echo "__rm_single_file: 1 argument required but $# passed."
#         exit
#     fi
# 
#     if [ -e $1 ]
#     then
#         BASENAME=`basename $1`
#         NAME=$BASENAME
#         COUNT=0
#         while [ -e ~/.Trash/$NAME ]
#         do
#             COUNT=$(($COUNT+1))
#             NAME="$BASENAME.$COUNT"
#         done
# 
#         command /bin/mv $1 ~/.Trash/$NAME
#     else
#         echo "No such file or directory: $file"
#     fi
# }

# Firefox wrappers
function ff4(){
  bin='/Applications/Firefox 4.app/Contents/MacOS/firefox-bin'
  if [ -x $bin ]
  then
    $bin -P 'FF4' $*
  else
    echo "Firefox 4 non trouvé"
  fi
}
function ff36(){
  bin='/Applications/Firefox 3-6.app/Contents/MacOS/firefox-bin'
  if [ -x $bin ]
  then
    $bin -P 'FF36' $* &
  else
    echo "Firefox 3.6 non trouvé"
  fi
}
function ff3(){
  bin='/Applications/Firefox 3.app/Contents/MacOS/firefox-bin'
  if [ -x $bin ]
  then
    $bin -P 'FF3' $* &
  else
    echo "Firefox 3 non trouvé"
  fi
}

function ff2(){
  bin='/Applications/Firefox 2.app/Contents/MacOS/firefox-bin'
  if [ -x $bin ]
  then
    $bin -P 'FF2' $* &
  else
    echo "Firefox 2 non trouvé"
  fi
}

